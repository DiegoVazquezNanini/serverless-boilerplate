AWSTemplateFormatVersion: 2010-09-09
Description: Serverless React/Express Web boilerplate

Parameters:
  StackName:
    Description: Name for the stack instance
    Type: String
  WebZip:
    Description: zip of the web lambda
    Type: String
  SecurityGroupIds:
    Description: List of security groups
    Type: String
    Default: sg-xxxxxxxx
  SubnetIds:
    Description: List of subnets
    Type: String
    Default: subnet-xxxxxxxx,subnet-xxxxxxxx,subnet-xxxxxxxx
  Bucket:
    Description: bucket for the lambda function zip file
    Type: String
  DomainName:
    Description: domain name use in the api mappings
    Type: String

Resources:

  WebLambdaFnc:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 15
      MemorySize: 1024
      Handler: lambda.handler
      Runtime: nodejs6.10
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Ref WebZip
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SecurityGroupIds
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BASE_URL: !Sub https://${DomainName}/

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: 2.0
        info:
          version: 1.0
          title:
            Ref: AWS::StackName
        paths:
          '/{proxy+}':
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebLambdaFnc.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
      Name: !Ref ${StackName}

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      CacheClusterEnabled: true
      CacheClusterSize: 13.5
      StageName: stage
      Description: Stage
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref APIDeployment

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebLambdaFnc
      Principal: apigateway.amazonaws.com

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
                - ec2:DetachNetworkInterface
                - ec2:ModifyNetworkInterfaceAttribute
                - ec2:ResetNetworkInterfaceAttribute
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
                Resource: '*'

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref Stage
      DomainName: !Ref DomainName
      RestApiId: !Ref ApiGateway
      Stage: !Ref Stage
